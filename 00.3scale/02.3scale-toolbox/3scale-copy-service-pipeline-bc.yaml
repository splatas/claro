apiVersion: v1
kind: BuildConfig
metadata:
  labels:
    name: "3scale-copy-service-pipeline"
  name: "3scale-copy-service-pipeline"
spec:
  strategy:
    type: "JenkinsPipeline"
    jenkinsPipelineStrategy:
      env:
        - name: ACCESS_TOKEN_NOPROD
          value: REEMPLAZAR_c903ebd69db06c50332b2adbd05300f82f36829231da66e0abb5d45c0adc8826
        - name: ACCESS_TOKEN_SANDBOX
          value: REEMPLAZAR_bb254da6b6a1096341c0f2b73a83eda3ca0bbbcd01273c40e1d8c9e0592102c4
        - name: ACCESS_TOKEN_PROD
          value: REEMPLAZAR_dd7113ece660c2cca5e2bb9ddb1fe8d5dcaa8fbe540098b4768e1492fb74bbca
        - name: URL_NOPROD
          value: REEMPLAZAR_noprod-admin.prod-comafi-3scale.apps.bue299.comafi.com.ar
        - name: URL_SANDBOX
          value: REEMPLAZAR_sandbox-admin.prod-comafi-3scale.apps.bue299.comafi.com.ar
        - name: URL_PROD
          value: REEMPLAZAR_3scale-admin.prod-comafi-3scale.apps.bue299.comafi.com.ar
      jenkinsfile: |-
        node("3scale_toolbox") {
          stage("Select Tenant") {
            def INPUT_PARAMS = input message: 'Seleccione los Tenant de origen y destino', ok: 'Next',
            parameters: [
              choice(name: 'TENANT_SOURCES', choices: ['NOPROD','SANDBOX','PROD'].join('\n'), description: 'Seleccione un TENANT origen'),
              choice(name: 'TENANT_DESTINATION', choices: ['NOPROD','SANDBOX','PROD'].join('\n'), description: 'Seleccione un TENANT destino')
            ]
            env.TENANT_SOURCES = INPUT_PARAMS.TENANT_SOURCES
            env.TENANT_DESTINATION = INPUT_PARAMS.TENANT_DESTINATION
          }
          stage("Select service") {
            def INPUT_PARAMS = input message: 'Seleccione el servicio a promocionar', ok: 'Next',
            parameters: [
              choice(name: 'ID_SOURCES', choices: ['5:API'].join('\n'), description: "Seleccione un ID de servicio origen en ${env.TENANT_SOURCES}"),
              string(name: 'SERVICE_NAME', defaultValue: 'None', description: "Nombre del servicio a promocionar a ${env.TENANT_DESTINATION}")
            ]
            env.ID_SOURCES = INPUT_PARAMS.ID_SOURCES
            env.SERVICE_NAME = INPUT_PARAMS.SERVICE_NAME
          }
          stage("Copy Service") {
              echo "All parameters have been set as Environment Variables"
              def idS = env.ID_SOURCES.split(":")[0].trim()
              echo "ID_SOURCES: ${idS}"
              echo "SERVICE_NAME: ${env.SERVICE_NAME}"

              def URL_SOURCE = env.TENANT_SOURCES == "PROD" ? env.URL_PROD : (env.TENANT_SOURCES == "NOPROD" ? env.URL_NOPROD : env.URL_SANDBOX )
              echo "URL_SOURCE: ${URL_SOURCE}"

              def ACCESS_TOKEN_SOURCE = env.TENANT_SOURCES == "PROD" ? env.ACCESS_TOKEN_PROD : (env.TENANT_SOURCES == "NOPROD" ? env.ACCESS_TOKEN_NOPROD : env.ACCESS_TOKEN_SANDBOX )
              echo "ACCESS_TOKEN_SOURCE: ${ACCESS_TOKEN_SOURCE}"

              def URL_DESTINATION = env.TENANT_DESTINATION == "PROD" ? env.URL_PROD : (env.TENANT_DESTINATION == "NOPROD" ? env.URL_NOPROD : env.URL_SANDBOX )
              echo "URL_DESTINATION: ${URL_DESTINATION}"

              def ACCESS_TOKEN_DESTINATION = env.TENANT_DESTINATION == "PROD" ? env.ACCESS_TOKEN_PROD : (env.TENANT_DESTINATION == "NOPROD" ? env.ACCESS_TOKEN_NOPROD : env.ACCESS_TOKEN_SANDBOX )
              echo "ACCESS_TOKEN_DESTINATION: ${ACCESS_TOKEN_DESTINATION}"

              sh "3scale copy service ${idS} --source=https://${ACCESS_TOKEN_SOURCE}@${URL_SOURCE} --destination=https://${ACCESS_TOKEN_DESTINATION}@${URL_DESTINATION} --target_system_name=${env.SERVICE_NAME} -k"
          }
        }
        


